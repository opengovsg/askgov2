// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ScreenState {
  NEW
  APPROVED
  REJECTED
}

model Question {
  id          Int               @id @default(autoincrement())
  body        String            
  screenState ScreenState       @default(NEW)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  answers     Answer[]          
  author      User              @relation(fields: [authorId], references: [id])
  authorId    Int
  uppedBy     QuestionUpper[]
  downedBy    QuestionDowner[]
}

model QuestionUpper {
 question     Question          @relation(fields: [questionId], references: [id])
 questionId   Int               
 user         User              @relation(fields: [userId], references: [id])
 userId       Int               
 createdAt    DateTime          @default(now())

 @@id([questionId, userId])
}

model QuestionDowner {
 question     Question          @relation(fields: [questionId], references: [id])
 questionId   Int               
 user         User              @relation(fields: [userId], references: [id])
 userId       Int               
 createdAt    DateTime          @default(now())

 @@id([questionId, userId])
}


model Answer {
  id          Int               @id @default(autoincrement())
  question    Question          @relation(fields: [questionId], references: [id])
  questionId  Int               
  body        String            
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  uppedBy     AnswerUpper[]
  downedBy    AnswerDowner[]
}



model AnswerUpper {
 answer       Answer            @relation(fields: [answerId], references: [id])
 answerId     Int               
 user         User              @relation(fields: [userId], references: [id])
 userId       Int               
 createdAt    DateTime          @default(now())

 @@id([answerId, userId])
}

model AnswerDowner {
 answer       Answer            @relation(fields: [answerId], references: [id])
 answerId     Int               
 user         User              @relation(fields: [userId], references: [id])
 userId       Int               
 createdAt    DateTime          @default(now())

 @@id([answerId, userId])
}


model User {
  id                Int                @id @default(autoincrement())
  openid            String             @unique
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  authoredQuestions Question[]
  uppedQuestions    QuestionUpper[]
  downedQuestions   QuestionDowner[]
  uppedAnswers      AnswerUpper[]
  downedAnswers     AnswerDowner[]
}

model Session {
  id          String         @id
  sid         String         @unique
  data        String
  expiresAt   DateTime
}
