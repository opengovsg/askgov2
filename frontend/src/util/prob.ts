import {Combatant, Attack, Defense, DamageType, HitLocation} from "../data/combatant";

export class DieRoll {
  static #data = [
    [0.166666666666667,0.166666666666667,0.166666666666667,0.166666666666667,0.166666666666667,0.166666666666667],
    [0.0277777777777778,0.0555555555555556,0.0833333333333333,0.111111111111111,0.138888888888889,0.166666666666667,0.138888888888889,0.111111111111111,0.0833333333333333,0.0555555555555556,0.0277777777777778],
    [0.00462962962962963,0.0138888888888889,0.0277777777777778,0.0462962962962963,0.0694444444444444,0.0972222222222222,0.115740740740741,0.125,0.125,0.115740740740741,0.0972222222222222,0.0694444444444444,0.0462962962962963,0.0277777777777778,0.0138888888888889,0.00462962962962963],
    [0.000771604938271605,0.00308641975308642,0.00771604938271605,0.0154320987654321,0.0270061728395062,0.0432098765432099,0.0617283950617284,0.0802469135802469,0.0964506172839506,0.108024691358025,0.112654320987654,0.108024691358025,0.0964506172839506,0.0802469135802469,0.0617283950617284,0.0432098765432099,0.0270061728395062,0.0154320987654321,0.00771604938271605,0.00308641975308642,0.000771604938271605],
    [0.000128600823045268,0.000643004115226338,0.00192901234567901,0.00450102880658436,0.00900205761316872,0.0162037037037037,0.0263631687242798,0.0392232510288066,0.0540123456790123,0.0694444444444444,0.0837191358024691,0.0945216049382716,0.100308641975309,0.100308641975309,0.0945216049382716,0.0837191358024691,0.0694444444444444,0.0540123456790123,0.0392232510288066,0.0263631687242798,0.0162037037037037,0.00900205761316872,0.00450102880658436,0.00192901234567901,0.000643004115226338,0.000128600823045268],
    [2.14334705075446e-05,0.000128600823045267,0.000450102880658436,0.0012002743484225,0.00270061728395062,0.00540123456790123,0.00977366255144033,0.0162037037037037,0.0248842592592593,0.0357081618655693,0.0481610082304527,0.0612139917695473,0.0735382373113855,0.0837191358024691,0.0904706790123457,0.0928497942386831,0.0904706790123457,0.0837191358024691,0.0735382373113855,0.0612139917695473,0.0481610082304527,0.0357081618655693,0.0248842592592593,0.0162037037037037,0.00977366255144033,0.00540123456790123,0.00270061728395062,0.0012002743484225,0.000450102880658436,0.000128600823045267,2.14334705075446e-05],
    [3.57224508459076e-06,2.50057155921353e-05,0.000100022862368541,0.000300068587105624,0.00075017146776406,0.00165037722908093,0.00327574874256973,0.0059549325560128,0.0100272919524463,0.0157786065386374,0.0233553383630544,0.0326574645633288,0.0432848936899863,0.0545374657064472,0.0654685356652949,0.0749921410608139,0.0820437528577961,0.0857946101966164,0.0857946101966164,0.0820437528577961,0.0749921410608139,0.0654685356652949,0.0545374657064472,0.0432848936899863,0.0326574645633288,0.0233553383630544,0.0157786065386374,0.0100272919524463,0.0059549325560128,0.00327574874256973,0.00165037722908093,0.00075017146776406,0.000300068587105624,0.000100022862368541,2.50057155921353e-05,3.57224508459076e-06],
    [5.95374180765127e-07,4.76299344612102e-06,2.14334705075446e-05,7.14449016918153e-05,0.000196473479652492,0.000471536351165981,0.00101689910074684,0.00200522024081695,0.00365976508916324,0.00623952141441853,0.0100070492303003,0.0151748971193416,0.021843087943911,0.0299401768023167,0.0391803840877915,0.0490493065081542,0.0588307089239445,0.0676868998628258,0.0747718526139308,0.0793562338058223,0.0809435013717421,0.0793562338058223,0.0747718526139308,0.0676868998628258,0.0588307089239445,0.0490493065081542,0.0391803840877915,0.0299401768023167,0.021843087943911,0.0151748971193416,0.0100070492303003,0.00623952141441853,0.00365976508916324,0.00200522024081695,0.00101689910074684,0.000471536351165981,0.000196473479652492,7.14449016918153e-05,2.14334705075446e-05,4.76299344612102e-06,5.95374180765127e-07],
    [9.92290301275212e-08,8.93061271147691e-07,4.46530635573845e-06,1.6372789971041e-05,4.9118369913123e-05,0.00012770776177412,0.000297091716201798,0.00063050125743027,0.00123688986053955,0.00226490261266067,0.00389999857110197,0.00635055869913123,0.00982159017299192,0.0144774162665752,0.0203975194330133,0.0275324836153025,0.0356697602309099,0.0444217606881573,0.0532432214664939,0.0614792309670782,0.0684397505144033,0.0734909050640146,0.076147762345679,0.076147762345679,0.0734909050640146,0.0684397505144033,0.0614792309670782,0.0532432214664939,0.0444217606881573,0.0356697602309099,0.0275324836153025,0.0203975194330133,0.0144774162665752,0.00982159017299192,0.00635055869913123,0.00389999857110197,0.00226490261266067,0.00123688986053955,0.00063050125743027,0.000297091716201798,0.00012770776177412,4.9118369913123e-05,1.6372789971041e-05,4.46530635573845e-06,8.93061271147691e-07,9.92290301275212e-08],
    [1.65381716879202e-08,1.65381716879202e-07,9.09599442835611e-07,3.63839777134244e-06,1.18247927568629e-05,3.31094197192162e-05,8.26081675811614e-05,0.000187542866941015,0.000392946959304984,0.000767701929753256,0.00140951529661806,0.00244665711951091,0.00403407352897594,0.00634189269716676,0.00953533095924571,0.013746594459686,0.0190415547363207,0.025386755067825,0.032623693616742,0.0404573294001592,0.0484643679137242,0.0561241048218429,0.0628704385076377,0.068158105450558,0.0715327193834781,0.072692805974699,0.0715327193834781,0.068158105450558,0.0628704385076377,0.0561241048218429,0.0484643679137242,0.0404573294001592,0.032623693616742,0.025386755067825,0.0190415547363207,0.013746594459686,0.00953533095924571,0.00634189269716676,0.00403407352897594,0.00244665711951091,0.00140951529661806,0.000767701929753256,0.000392946959304984,0.000187542866941015,8.26081675811614e-05,3.31094197192162e-05,1.18247927568629e-05,3.63839777134244e-06,9.09599442835611e-07,1.65381716879202e-07,1.65381716879202e-08],
    [2.7563619479867e-09,3.03199814278537e-08,1.81919888567122e-07,7.88319517124196e-07,2.75911830993469e-06,8.27735492980406e-06,2.20426264980496e-05,5.3272207368739e-05,0.000118611767345764,0.000245955689342749,0.000478904106652949,0.000881162056618232,0.00153973961685069,0.00256546458855499,0.00408919525521177,0.00625234401020057,0.00919101725015101,0.0130143669082034,0.0177793035894977,0.0234652097066631,0.0299533825324095,0.0370163009261023,0.0443211148879885,0.0514496732851107,0.0579345109129,0.06330709034199,0.067151815586949,0.0691574823584015,0.0691574823584015,0.067151815586949,0.06330709034199,0.0579345109129,0.0514496732851107,0.0443211148879885,0.0370163009261023,0.0299533825324095,0.0234652097066631,0.0177793035894977,0.0130143669082034,0.00919101725015101,0.00625234401020057,0.00408919525521177,0.00256546458855499,0.00153973961685069,0.000881162056618232,0.000478904106652949,0.000245955689342749,0.000118611767345764,5.3272207368739e-05,2.20426264980496e-05,8.27735492980406e-06,2.75911830993469e-06,7.88319517124196e-07,1.81919888567122e-07,3.03199814278537e-08,2.7563619479867e-09],
    [4.59393657997783e-10,5.5127238959734e-09,3.58327053238271e-08,1.67219291511193e-07,6.27072343166974e-07,2.00663149813432e-06,5.67994318748459e-06,1.45535910853698e-05,3.42918989949025e-05,7.51531272991734e-05,0.000154510625356342,0.000299991408971081,0.000552940907363188,0.000971639637560896,0.00163340355220523,0.0026344682723482,0.00408648712959788,0.0061086879381954,0.00881528193363657,0.0122985727866546,0.0166092706661875,0.0217365968188378,0.0275916130918108,0.033997497487962,0.0406900320418624,0.0473303454810835,0.0535300843235067,0.0588869478955566,0.0630263424739588,0.0656433661909318,0.0665387960957802,0.0656433661909318,0.0630263424739588,0.0588869478955566,0.0535300843235067,0.0473303454810835,0.0406900320418624,0.033997497487962,0.0275916130918108,0.0217365968188378,0.0166092706661875,0.0122985727866546,0.00881528193363657,0.0061086879381954,0.00408648712959788,0.0026344682723482,0.00163340355220523,0.000971639637560896,0.000552940907363188,0.000299991408971081,0.000154510625356342,7.51531272991734e-05,3.42918989949025e-05,1.45535910853698e-05,5.67994318748459e-06,2.00663149813432e-06,6.27072343166974e-07,1.67219291511193e-07,3.58327053238271e-08,5.5127238959734e-09,4.59393657997783e-10],
  ] as const;

  static prob(dice: number, roll: number): number {
    if (dice > 12 || dice < 1 || roll < dice || roll > dice * 6 ) {
      return 0;
    }
    return DieRoll.#data[dice-1][roll-dice]
  }
}

export class TakeDamage {
  static #data = [
    [0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185],
    [0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185, 0.0185185185185185],
    [0.0457818930041152, 0.0457818930041152, 0.0450102880658436, 0.0437242798353909, 0.0417952674897119, 0.0390946502057613, 0.0358796296296296, 0.0324074074074074, 0.0289351851851852, 0.0257201646090535, 0.0230195473251029, 0.0210905349794239, 0.0198045267489712, 0.0190329218106996, 0.0186471193415638, 0.0186471193415638, 0.0462962962962963],
    [0.0912208504801097, 0.0912208504801097, 0.0891632373113855, 0.0857338820301783, 0.0805898491083676, 0.0733882030178326, 0.0648148148148148, 0.0555555555555556, 0.0462962962962963, 0.0377229080932785, 0.0305212620027435, 0.0253772290809328, 0.0219478737997257, 0.0198902606310014, 0.0188614540466392, 0.0188614540466392, 0.0925925925925926],
    [0.159379286694102, 0.159379286694102, 0.155392661179698, 0.148748285322359, 0.138781721536351, 0.12482853223594, 0.108217592592593, 0.0902777777777778, 0.072337962962963, 0.0557270233196159, 0.0417738340192044, 0.0318072702331962, 0.0251628943758574, 0.0211762688614541, 0.0191829561042524, 0.0191829561042524, 0.162037037037037],
    [0.25480109739369, 0.25480109739369, 0.248113854595336, 0.236968449931413, 0.220250342935528, 0.196844993141289, 0.168981481481481, 0.138888888888889, 0.108796296296296, 0.0809327846364883, 0.0575274348422497, 0.0408093278463649, 0.0296639231824417, 0.0229766803840878, 0.0196330589849109, 0.0196330589849109, 0.259259259259259],
    [0.368398491083676, 0.368398491083676, 0.358496227709191, 0.341992455418381, 0.317236796982167, 0.282578875171468, 0.241319444444444, 0.196759259259259, 0.152199074074074, 0.110939643347051, 0.0762817215363512, 0.0515260631001372, 0.0350222908093279, 0.0251200274348423, 0.0201688957475995, 0.0201688957475995, 0.375],
    [0.491083676268862, 0.491083676268862, 0.477709190672154, 0.455418381344307, 0.421982167352538, 0.37517146776406, 0.319444444444444, 0.259259259259259, 0.199074074074074, 0.143347050754458, 0.0965363511659808, 0.0631001371742113, 0.0408093278463649, 0.0274348422496571, 0.0207475994513032, 0.0207475994513032, 0.5],
    [0.613768861454047, 0.613768861454047, 0.596922153635117, 0.568844307270233, 0.526727537722908, 0.467764060356653, 0.397569444444444, 0.321759259259259, 0.245949074074074, 0.175754458161866, 0.11679098079561, 0.0746742112482854, 0.046596364883402, 0.0297496570644719, 0.0213263031550069, 0.0213263031550069, 0.625],
    [0.727366255144033, 0.727366255144033, 0.707304526748971, 0.673868312757202, 0.623713991769547, 0.553497942386831, 0.469907407407407, 0.37962962962963, 0.289351851851852, 0.205761316872428, 0.135545267489712, 0.0853909465020577, 0.0519547325102881, 0.0318930041152264, 0.0218621399176956, 0.0218621399176956, 0.740740740740741],
    [0.822788065843621, 0.822788065843621, 0.800025720164609, 0.762088477366255, 0.705182613168724, 0.625514403292181, 0.530671296296296, 0.428240740740741, 0.325810185185185, 0.2309670781893, 0.151298868312757, 0.0943930041152264, 0.0564557613168725, 0.0336934156378601, 0.022312242798354, 0.022312242798354, 0.837962962962963],
    [0.890946502057613, 0.890946502057613, 0.866255144032922, 0.825102880658436, 0.763374485596708, 0.676954732510288, 0.574074074074074, 0.462962962962963, 0.351851851851852, 0.248971193415638, 0.162551440329218, 0.10082304526749, 0.0596707818930042, 0.0349794238683128, 0.0226337448559672, 0.0226337448559672, 0.907407407407407],
    [0.936899862825789, 0.936899862825789, 0.911694101508916, 0.869684499314129, 0.806670096021948, 0.718449931412894, 0.613425925925926, 0.5, 0.386574074074074, 0.281550068587106, 0.193329903978052, 0.130315500685871, 0.0883058984910838, 0.0631001371742113, 0.0504972565157751, 0.0504972565157751, 0.953703703703704],
    [0.965020576131687, 0.965020576131687, 0.940329218106996, 0.89917695473251, 0.837448559670782, 0.751028806584362, 0.648148148148148, 0.537037037037037, 0.425925925925926, 0.323045267489712, 0.236625514403292, 0.174897119341564, 0.133744855967078, 0.109053497942387, 0.0967078189300413, 0.0967078189300413, 0.981481481481481],
    [0.978652263374486, 0.978652263374486, 0.953575102880658, 0.911779835390946, 0.849086934156379, 0.761316872427983, 0.656828703703704, 0.543981481481481, 0.431134259259259, 0.326646090534979, 0.238876028806584, 0.176183127572017, 0.134387860082305, 0.109310699588477, 0.0967721193415639, 0.0967721193415639, 0.99537037037037],
    [0.978652263374486, 0.978652263374486, 0.953575102880658, 0.911779835390946, 0.849086934156379, 0.761316872427983, 0.656828703703704, 0.543981481481481, 0.431134259259259, 0.326646090534979, 0.238876028806584, 0.176183127572017, 0.134387860082305, 0.109310699588477, 0.0967721193415639, 0.0967721193415639, 0.99537037037037],
  ] as const;

  static prob(attack: number, defend?: number): number {
    if (!Number.isInteger(attack)) {
      throw Error(`Cannot process probability with attack: ${attack}, must be integer.`);
    }
    if (attack < 3) {
      attack = 0;
    } else if (attack > 18) {
      attack = 15;
    } else {
      attack = attack - 3;
    }

    if (defend === undefined) {
      // Use "No Defense" entry in this case, which is the last column
      defend = 16;
    } else if (!Number.isInteger(defend)) {
      throw Error(`Cannot process probability with defend: ${defend}, must be integer.`);
    } else if (defend < 3) {
      defend = 0;
    } else if (defend > 18) {
      defend = 15;
    } else {
      defend = defend - 3;
    }

    return this.#data[attack][defend];
  }
}

export enum DefenseMode {
  /** Normal defense, prob to take dmg calculated by attacker and defender effective skill. */
  Skill,
  /** Defender can't defend, prob to take dmg calculated by attacker skill only. */
  None,
  /** Always hit, prob to take dmg is 1.0. Used for debugging. */
  Hit,
}

export class Calculators {
  /**
   * Calculate expected damage given an attacker, attack, defender, and defense. Defense can be omitted.
   *
   * @param {Defense | undefined} defense - May be omitted if the defender is not using any defense.
   * @param {boolean | undefined} alwaysHit - Usually omitted, but can be set to true for testing (probability 100% for taking damage).
   *
   * @see Use {@link enad} to compute expected number of turns to disable from expected damage.
   */
  static expectedDamage(attacker: Combatant, attack: Attack, defender: Combatant, defense?:Defense, alwaysHit?: boolean): number {
    // attack skill, defense skill, damage reduction
    let attackLevel = attack.level;
    let woundModifier = attack.woundModifier;
    let damageReduction = defender.damageReduction;
    switch (attack.hitLocation) {
      case HitLocation.Vitals:
        switch (attack.damage.type) {
            case DamageType.pim: case DamageType.pi: case DamageType.pip: case DamageType.pipp: 
            case DamageType.imp: woundModifier = Math.max(3,woundModifier); attackLevel -= 3; break;
            case DamageType.burn: woundModifier = Math.max(2,woundModifier); attackLevel -= 3; break;
            default:
        }
        break;
      case HitLocation.Skull: 
        if (attack.damage.type !== DamageType.tox) {
          attackLevel -= 7; 
          damageReduction += 2; 
          woundModifier = Math.max(4,woundModifier); 
        }
        break;
      case HitLocation.Eye: 
        if (attack.damage.type !== DamageType.tox) {
          attackLevel -= 9; 
          woundModifier = Math.max(4,woundModifier); 
        }
        break;
      case HitLocation.Face: 
        attackLevel -= 5; 
        woundModifier = attack.damage.type === DamageType.cor ? Math.max(1.5,woundModifier) : woundModifier;
        break;
      case HitLocation.Neck: 
        attackLevel -= 5; 
        switch (attack.damage.type) {
          case DamageType.cr: 
          case DamageType.cor: 
            woundModifier = Math.max(1.5,woundModifier);
            break;
          case DamageType.cut:
            woundModifier = Math.max(2,woundModifier);
            break;
          default:
        }
        break;
      case HitLocation.Groin: attackLevel -= 3; break;
      case HitLocation.ArmLeg: 
        attackLevel -= 2; 
        switch (attack.damage.type) {
          case DamageType.imp: case DamageType.pip: case DamageType.pipp: 
            woundModifier = 1; 
            break;
          default:
        }
        break;
      case HitLocation.HandFoot: attackLevel -= 4; break;
      default: 
    }
    let probTakeAnyDmg: number;
    if (alwaysHit === true) {
      probTakeAnyDmg = 1.0
    } else if (defense === undefined) {
      probTakeAnyDmg = TakeDamage.prob(attackLevel);
    } else {
      probTakeAnyDmg = TakeDamage.prob(attackLevel, defense.level);
    }

    damageReduction = Math.floor(damageReduction / attack.armorDivisor);

    let expectedDamage = 0.0;
    for (let roll = attack.damage.dice; roll <= attack.damage.dice * 6; roll++) {
      let damage = roll + attack.damage.adds;
      // A negative modifier can't reduce damage below 0 for crushing damage,
      // or below 1 fir any other type of damage (p. 378)
      damage = attack.damage.type === DamageType.cr ? Math.max(damage, 0) : Math.max(damage, 1);
      damage -= damageReduction;
      // Damage after the wound modifiers is rounded down,
      // but the minimum damage is 1 for any attack that penetrated DR at all (p. 379)
      damage *= woundModifier;
      damage = damage > 0 && damage < 1 ? 1 : damage; 
      damage = Math.max(Math.floor(damage),0);
      const rollProb = DieRoll.prob(attack.damage.dice, roll) * probTakeAnyDmg;
      expectedDamage += damage * rollProb;
    }

    return expectedDamage;
  }

  /**
   * Expected Number of Attacks to Disable.
   * @returns {number} The (fractional) expected number of attacks to disable the defender. Returns
   * NaN if expectedDamage < 0, because the defender cannot be disabled.
   * @see Use {@link expectedDamage} to compute the expectedDamage argument.
   */
  static enad(defender: Combatant, expectedDamage: number): number {
    if (expectedDamage <= 0.0) {
      return Number.NaN;
    } else {
      return defender.hitPoints / expectedDamage;
    }
  }

  static expectedAttacks(attack: Attack) {
    let shots;
    let reloadTurns;
    let aimTurns;
    if (attack.ammo === undefined ) {
      // For the purposes of this calculation, a weapon without ammo is eqivalent to a weapon with these ammo defaults.
      shots = 1;
      reloadTurns = 0;
      aimTurns = 0;
    } else {
      shots = attack.ammo.shots;
      reloadTurns = attack.ammo.reloadTurns;
      aimTurns = attack.ammo.aimTurns;
    }

    if (attack.fastDrawSkillLevel !== undefined) {
      // Fast Draw Calculation
      let prob = TakeDamage.prob(attack.fastDrawSkillLevel);
      return shots / (shots * (1 + aimTurns) * prob + (shots * (1 + aimTurns) + reloadTurns) * (1-prob));
    } else if (attack.castSkillLevel !== undefined) {
      // Cast/Reload Skill Calculation
      let prob = TakeDamage.prob(attack.castSkillLevel);
      return shots / (shots * (1 + aimTurns) + reloadTurns/prob);
    } else {
      // Calculation with no skill roll
      return shots / (shots * (1 + aimTurns) + reloadTurns);
    }
  }

  /**
   * Expected Number of Turns to Disable.
   * @returns {number} The (fractional) expected number of turns to disable the defender. Returns
   * NaN if enad is NaN, because the defender cannot be disabled.
   * @see Use {@link enad} to compute the enad argument (Expected Number of Attacks to Disable)
   * and {@link expectedAttacks} to compute the expectedAttacks argument.
   */
  static etd(enad: number, expectedAttacks: number): number {
    return enad / expectedAttacks;
  }

  /**
   * Creates and returns all tables for one attacker and defender
   * @param attacker
   * @param defender
   * @returns {MatchupTables} an object containing a list of attack names,
   * defense names, and tables indexed by [attack index][defense index].
   */
  static matchupTables(attacker: Combatant, defender: Combatant): MatchupTables {
    const attackNames = [...attacker.attacks.keys()];
    const defenseNames = ["No Defense", ...defender.defenses.keys()];
    const defenses = [undefined, ...defender.defenses.values()];
    const expectedDamage = Array.from(attacker.attacks.values(), (attack) => {
          return Float64Array.from(defenses, (defense) => {
                return Calculators.expectedDamage(attacker, attack, defender, defense);
          });
    });
    const enad = Array.from(attacker.attacks.values(), (attack, i) => {
          return Float64Array.from(defenses, (defense, j) => {
                return Calculators.enad(defender, expectedDamage[i][j]);
          });
    });
    const expectedAttacks = Array.from(attacker.attacks.values(), (attack, i) => {
          return Calculators.expectedAttacks(attack);
        }
    );
    const etd = Array.from(attacker.attacks.values(), (attack, i) => {
      return Float64Array.from(defenses, (defense, j) => {
        return Calculators.etd(enad[i][j], expectedAttacks[i]);
      });
    });

    return {
      attacks: attackNames,
      defenses: defenseNames,
      expectedDamage,
      enad,
      expectedAttacks,
      etd,
    };
  }

}

export interface MatchupTables {
  readonly attacks: readonly string[];
  readonly defenses: readonly string[];
  readonly expectedDamage: readonly Float64Array[];
  readonly enad: readonly Float64Array[];
  readonly expectedAttacks: readonly number[];
  readonly etd: readonly Float64Array[];
}
